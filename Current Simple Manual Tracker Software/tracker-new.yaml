esphome:
  name: "tracker"

# external_components:
#   - source: github://carlosgs/esphome@patch-39
#     components: [mpu6050]

esp8266:
  board: nodemcu

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:

# Example configuration entry
switch:
  - platform: restart
    name: "Solar Tracker ESP"

  - platform: gpio
    pin: D5
    inverted: True
    name: "Relay #1"
    id: relay1
    interlock: [relay2]

  - platform: gpio
    pin: D6
    name: "Relay #2"
    id: relay2
    interlock: [relay1]
    inverted: True

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-Daf7Eb"
    password: "BoTIZPu4x71W"

captive_portal:

# Example configuration entry for ESP32
i2c:
  sda: D2 #D2
  scl: D1 #D1
  scan: true
  # id: bus_a

# # Example configuration entry
# sensor:
  
#   - platform: mpu6050
#     update_interval: 1s
#     address: 0x68
#     accel_x:
#       name: "MPU6050 Accel X"
#     accel_y:
#       name: "MPU6050 Accel Y"
#     accel_z:
#       name: "MPU6050 Accel z"
#     gyro_x:
#       name: "MPU6050 Gyro X"
#     gyro_y:
#       name: "MPU6050 Gyro Y"
#     gyro_z:
#       name: "MPU6050 Gyro z"
#     temperature:
#       name: "MPU6050 Temperature"

# Example configuration entry
sun:
  latitude: 46.373281°
  longitude: 21.766845°

# At least one time source is required
time:
  - platform: homeassistant



sensor:
  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth


  - platform: mpu6050
    address: 0x68
    accel_x:
      id: accel_x
      name: "MPU6050 Accel X"
      state_class: measurement
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 2
    accel_y:
      id: accel_y
      name: "MPU6050 Accel Y"
      state_class: measurement
      filters:
       - sliding_window_moving_average:
          window_size: 12
          send_every: 5
    accel_z:
      id: accel_z
      name: "MPU6050 Accel z"
      state_class: measurement
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 2
    gyro_x:
      name: "MPU6050 Gyro X"
      state_class: measurement
      id: gyro_x
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 2
    gyro_y:
      name: "MPU6050 Gyro Y"
      state_class: measurement
      id: gyro_y
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 2
    gyro_z:
      name: "MPU6050 Gyro z"
      state_class: measurement
      id: gyro_z
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 2
    temperature:
      name: "MPU6050 Temperature"
      state_class: measurement
      filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 5
    update_interval: 500ms

  - platform: template
    id: roll
    name: roll
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      return  (atan( id(accel_y).state / sqrt( pow( id(accel_x).state , 2) + pow( id(accel_z).state , 2) ) ) * 180 / PI) ;
    update_interval: 500ms

  - platform: template
    id: pitch
    name: pitch
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      return  (atan(-1 * id(accel_x).state / sqrt(pow(id(accel_y).state, 2) + pow(id(accel_z).state, 2))) * 180 / PI);
    update_interval: 500ms



    